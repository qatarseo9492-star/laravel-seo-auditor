<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use Illuminate\Support\Facades\Http;
use Illuminate\Support\Facades\Log;
use Illuminate\Http\JsonResponse;

class AiReadabilityController extends Controller
{
    /**
     * Approximates the number of syllables in a word.
     */
    private static function countSyllables(string $word): int
    {
        $word = strtolower(trim($word));
        if (mb_strlen($word) <= 3) return 1;

        $word = preg_replace('/(es|ed|e)$/', '', $word);
        $word = preg_replace('/^y/', '', $word);
        
        preg_match_all('/[aeiouy]{1,2}/', $word, $matches);
        $syllableCount = count($matches[0]);
        
        return $syllableCount > 0 ? $syllableCount : 1;
    }
    
    /**
     * Analyzes text to calculate a Flesch-Kincaid readability score.
     */
    private static function analyzeReadability(string $text): int
    {
        if (empty($text)) {
            return 0;
        }

        $words = preg_split('/[\s,]+/', $text, -1, PREG_SPLIT_NO_EMPTY);
        $wordCount = count($words);

        if ($wordCount < 50) {
            return 65; // Return a neutral score for very short texts
        }

        $sentenceCount = preg_match_all('/[.!?]+/', $text, $matches);
        $sentenceCount = $sentenceCount > 0 ? $sentenceCount : 1;

        $syllableCount = 0;
        foreach ($words as $word) {
            $syllableCount += self::countSyllables($word);
        }

        $fleschScore = 0;
        if ($wordCount > 0 && $sentenceCount > 0 && $syllableCount > 0) {
            $fleschScore = 206.835 - 1.015 * ($wordCount / $sentenceCount) - 84.6 * ($syllableCount / $wordCount);
        }
        
        return (int) max(0, min(100, round($fleschScore)));
    }

    /**
     * Uses OpenAI API to get a likelihood score of content being AI-generated.
     */
    private static function getAiLikelihood(string $text): int
    {
        $apiKey = env('OPENAI_API_KEY');
        if (!$apiKey) {
            Log::warning('AI Likelihood check skipped: OPENAI_API_KEY is not configured.');
            return -1;
        }

        $words = preg_split('/[\s]+/', $text, -1, PREG_SPLIT_NO_EMPTY);
        if (count($words) < 50) {
             Log::warning('AI Likelihood check skipped: Text content is too short (less than 50 words).');
             return -1;
        }
        $truncatedText = implode(' ', array_slice($words, 0, 1000));

        $systemMessage = "You are an expert AI text classifier. Analyze the following text and determine the probability that it was written by an AI. Your response must be a single, valid JSON object with one key: \"ai_probability\", which must be an integer between 0 and 100.";

        try {
            $response = Http::withToken($apiKey)
                ->timeout(60)
                ->post('https://api.openai.com/v1/chat/completions', [
                    'model' => env('OPENAI_MODEL', 'gpt-4-turbo'),
                    'messages' => [
                        ['role' => 'system', 'content' => $systemMessage],
                        ['role' => 'user', 'content' => $truncatedText]
                    ],
                    'temperature' => 0.2,
                    'max_tokens' => 50,
                    'response_format' => ['type' => 'json_object'],
                ]);

            if ($response->failed()) {
                Log::error('OpenAI AI Content Check API Error', ['status' => $response->status(), 'body' => $response->body()]);
                return -1;
            }

            $content = $response->json('choices.0.message.content');
            $result = json_decode($content, true);

            if (json_last_error() === JSON_ERROR_NONE && isset($result['ai_probability']) && is_numeric($result['ai_probability'])) {
                return (int) max(0, min(100, $result['ai_probability']));
            }
            
            Log::warning('AI Likelihood check failed: OpenAI returned invalid JSON.', ['body' => $content]);
            return -1;

        } catch (\Exception $e) {
            Log::error("Error calling OpenAI for AI Content Check", ['message' => $e->getMessage()]);
            return -1;
        }
    }

    /**
     * Gets suggestions from OpenAI to make text sound more human.
     */
    private static function getHumanizeSuggestions(string $text, int $aiLikelihood): string
    {
        $apiKey = env('OPENAI_API_KEY');
        if (!$apiKey) {
            return 'OpenAI API key is not configured.';
        }
        
        $words = preg_split('/[\s]+/', $text, -1, PREG_SPLIT_NO_EMPTY);
        $truncatedText = implode(' ', array_slice($words, 0, 1000));

        if (empty($truncatedText)) {
            return 'No text provided for analysis.';
        }
        
        $systemMessage = "You are an expert editor specializing in making AI-generated text sound more human. Your suggestions must be concise, actionable, and easy to understand. IMPORTANT: Detect the primary language of the provided text (e.g., English, Arabic, Portuguese) and write your entire response, including all suggestions, in that same language.";
        $userMessage = "The following text has been flagged as {$aiLikelihood}% likely to be AI-generated. Please provide 3-5 specific, actionable suggestions to make it sound more natural, engaging, and human-written. Frame your suggestions as a list. Suggestions could include varying sentence structure, adding personal anecdotes or rhetorical questions, injecting more personality, or simplifying complex vocabulary. Here is the text:\n\n{$truncatedText}";
        
        try {
            $response = Http::withToken($apiKey)
                ->timeout(90)
                ->post('https://api.openai.com/v1/chat/completions', [
                    'model' => env('OPENAI_MODEL', 'gpt-4-turbo'),
                    'messages' => [
                        ['role' => 'system', 'content' => $systemMessage],
                        ['role' => 'user', 'content' => $userMessage]
                    ],
                    'temperature' => 0.7,
                    'max_tokens' => 500,
                ]);

            if ($response->failed()) {
                Log::error('OpenAI Humanize Suggestions API Error', ['status' => $response->status(), 'body' => $response->body()]);
                return 'Failed to get suggestions from the AI service.';
            }

            return trim($response->json('choices.0.message.content', 'No suggestions were returned.'));

        } catch (\Exception $e) {
            Log::error("Error calling OpenAI for Humanize Suggestions", ['message' => $e->getMessage()]);
            return 'An internal server error occurred while getting suggestions.';
        }
    }
    
    /**
     * Public static method to get all humanizer data for a given text.
     * This can be called from other controllers.
     */
    public static function getHumanizerDataForText(string $text): array
    {
        $aiLikelihood = self::getAiLikelihood($text);
        $humanScore = 0;
        $scoringMethod = '';

        if ($aiLikelihood !== -1) {
            $humanScore = 100 - $aiLikelihood;
            $scoringMethod = 'openai';
        } else {
            $humanScore = self::analyzeReadability($text);
            $aiLikelihood = 100 - $humanScore;
            $scoringMethod = 'readability_fallback';
        }

        $recommendation = '';
        $badgeType = 'success';
        if ($humanScore < 60) {
            $recommendation = 'This content seems highly AI-generated. A full rewrite is strongly recommended to improve authenticity and reader engagement.';
            $badgeType = 'danger';
        } elseif ($humanScore < 80) {
            $recommendation = 'This content could be more engaging. Please review the AI suggestions below to make it sound more human.';
            $badgeType = 'warning';
        } else {
            $recommendation = 'Excellent! This content has a natural, human-like quality that readers will appreciate.';
            $badgeType = 'success';
        }
        
        $suggestions = ($humanScore < 80 && $scoringMethod === 'openai') 
            ? self::getHumanizeSuggestions($text, $aiLikelihood) 
            : '';

        return [
            'human_score' => $humanScore,
            'ai_score' => $aiLikelihood,
            'suggestions' => $suggestions,
            'recommendation' => $recommendation,
            'badge_type' => $badgeType,
            'google_search_url' => 'https://www.google.com/search?q=how+to+make+ai+text+sound+more+human',
            'scoring_method' => $scoringMethod,
        ];
    }

    /**
     * Handles the AJAX request for checking a text snippet.
     */
    public function checkSnippet(Request $request): JsonResponse
    {
        $validated = $request->validate([
            'text' => 'required|string|min:50|max:10000'
        ]);

        $humanizerData = self::getHumanizerDataForText($validated['text']);

        return response()->json($humanizerData);
    }
}
